Bis zur ersten lauffähigen Version:
-----------------------------------

- nach verlorenen Methoden gucken, die mittlerweile nicht mehr gebraucht werden (z.b. suspend und wakeup)
- Fehlersicher machen (alles in Try/Catch Blöcke einschließen und angemessen handeln -> Diagramm von User-Veränderlichen
  erstellen und angemessen behandeln)
- Zustandsdiagramm der Threads zeichnen / evtl. vereinfachen (da stop_experiment nun vorhanden)
- Core in die Fehlerbehandlung/Thread-Zustände einbauen (Falls Fehler im Core -> sicherer neustart)
- Herausfinden, wie man den Expat-Parser abbrechen kann (Problem bei Stop: bei extrem großen results kann der ResultReader nachhinken
- Bei laufendem Experiment "Stop" mit Shortcut ESC belegen?
- Export der Daten vom Display weg -> CSV o.ä.
- Autoscaling toleranter machen -> skaliert sich erst bei 10% veränderung neu (oder so ähnlich)
- Core-Interface nicht mehr abstürzen lassen, wenn logdata.99 erreicht ist
- Achims Custom-Funktionen sinnvoll in Datentypen einbauen

Datentypen-bunch (NMR-Array und Co):
  Done: ResultReader auf mehrere Results pro File umbauen
  Done: in Accumulation mitführen, wieviel Results akkumuliert wurden
  - In Akkumulation überlegen, ob self.n nicht ausreicht
  - im Graphen ErrorResults anzeigbar machen
  - Description und ID im Graphen anzeigen (oder beim)
  - mehrere Graphen implementieren
  - DataPool Klasse implementieren (Alles was mit History/Channels und sonstiger Darstellung zu tun hat)
  - Fehlerbalken überarbeiten bei AutoScaling/Show Statistics toggled und Displaysource-changed)
  Done: Mittelwert bei Accumulation zurückgeben

Version 0.0.2:
? Console Fenster einbauen ?
? Skript checken mit Dummycore ?
? Synchronen ablauf implementieren ?


Auf irgendeine Art erledigt:
----------------------------

Vermutlich erledigt:
- Experiment restartable machen:
  Habe ein paar Konfigurationen getestet (Keine Fehler, Fehler im Experiment Script oder Data Handling Script,
  Fehler bei beiden - jedes Mal ließen sich die Experimente auch nach korrektur mehrere Male starten)
- Core stop/start aus der Oberfläche heraus
  (Achim) core wird von GUI vor JobWriter gestartet
-  Line / Column implementieren ?
  (Achim) wird angezeigt, wäre ganz nett, auch etwas hineinschreiben zu können.
- Fehlermeldungen zu Runtime von Skripts mit Traceback und
  Zeilennummerierung ausgestattet
- datahandler.jobs_pending() sollte nun stets korrekte Wahrheitswerte liefern.
- "None" Kanal richtig implementieren (-> Anzeige Stumm schalten)
- Stop implementieren
- Crash beim Restart des Cores beheben. (nur Windows?:
  File "E:\Eigene Dateien\Projekt NMR\svnrepository\CoreInterface.py", line 60, in start
  os.rename(self.core_output_filename, self.core_output_filename+".00")
  OSError: [Errno 13] Permission denied)
- Dummycore beenden, falls es einen Fehler gab
- Dialoge verbessern, sodaß sie bei zu langem Fehlertext ( ;) ) sich selbsttätig vergrößern


Verbesserungswürdig, läuft aber:
- Error Results implementieren (-> Zustände einführen)
  Vielleicht findet sich im Laufe der Zeit eine geschicktere Methode, Error-Results zu behandeln.
  Momentan werden sie durchgereicht + Error-Dialog in der Oberfläche angezeigt (sowie in der Console zusätzlich nochmal angezeigt)
- Kommandozeile zu öffnende Dateien mitgeben (Fehlersicher machen)
- mehrere Watchpoints implementieren -> "Quelle-Pulldownmenü" (Den Pool besser managen, sodaß es keinen Überlauf etc.
  geben kann)


Erledigt:
- Absturz bei sofortigem Quit nach Start fixen
- Absturz beim beenden des Programms beheben
- New / Skript speichern Toolbar-Button (richtig) implementieren
- Bei Save-File automatisch SaveAs aufrufen, wenn noch keine Datei angegeben
- Warnung, das Dateien überschrieben werden implementieren (beim Start des Exp.
- File-Delte etwas sicherer gemacht (mit Fehlerdialog)
- x_scaling bei ausgeschaltetem Autoscaling entfernen
- Autoscaling einbauen
- NiftyGuiElements vollständig in der Oberfläche verwenden
- Bei vielen Fehlern verhindern, das sich hundertweise Fehlerfenster stapeln
- Beim Save-File Dialog Warnung implementieren, falls Dateien überschrieben werden
- get_next_result umschreiben, sodaß None = no Jobs pending (um periodischen Crash des while jobs_pending() zu beheben)
- bei Start / Stop die Buttons richtig setzen (set_sensitive)
- bei Schliessen des Fensters nach Speicherung der Texte fragen
- Open-Dialog mit Doppelklick austatten und weniger anfällig für falsche Angaben machen
- DamarisGUI Signale / Inits nach Sparte ordnen & kommentieren
- core_interface.stop_queue reentrancysicher machen
- New-File nicht mehr auf alles, sondern nur noch auf aktuelles Tab beziehen
- bei "None"-Channel auch None anzeigen
- ^X ^V ^C ^S in Skript Fenstern einführen
- Bug: bei core_interface.stop_queue (vermutlich bewirkt das abschießen manchmal, daß ein Counter falsch gezählt wird?)
  ->
    Traceback (most recent call last):
      File "E:\Eigene Dateien\Projekt NMR\damaris\frontends\bluedamaris\DamarisGUI.py", line 373, in start_experiment
        self.core_interface.start()
      File "E:\Eigene Dateien\Projekt NMR\damaris\frontends\bluedamaris\CoreInterface.py", line 61, in start
        os.rename(self.core_output_filename+".%02d"%(i-j-1),self.core_output_filename+".%02d"%(i-j))
    OSError: [Errno 17] File exists
- Convenience-Functions verbessern, wie z.B. jobs_pending() oder get_variable()
- Channel-Combobox nicht in glade, sondern per Hand erstellen (gtk.get_new_text_combobox())
- beim Beenden auch "Abbrechen" als Alternative anbieten, nicht nur "Ja/Nein"
- Open-File nicht mehr global auf Veränderungen checken lassen, sondern nur noch auf der geöffneten Seite